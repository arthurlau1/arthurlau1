<#
.SYNOPSIS
    Inappropriate granting of user rights can provide system, administrative, and other high-level capabilities.
    The "Deny access to this computer from the network" right defines the accounts that are prevented from logging on from the network.
    In an Active Directory Domain, denying logons to the Enterprise Admins and Domain Admins groups on lower trust systems helps mitigate the risk of privilege escalation from credential theft attacks, which could lead to the compromise of an entire domain.
    Local accounts on domain-joined systems must also be assigned this right to decrease the risk of lateral movement resulting from credential theft attacks.
    Guests group must be assigned this right to prevent unauthenticated access.

.NOTES
    Author          : Arthur Lau
    LinkedIn        : linkedin.com/in/arthur-lau-4a7403172/
    GitHub          : github.com/arthurlau1
    Date Created    : 2025-09-011
    Last Modified   : 2025-09-011
    Date Created    : 2024-09-09
    Last Modified   : 2024-09-09
    Version         : 1.0
    CVEs            : N/A
    Plugin IDs      : N/A
    STIG-ID         : WN10-UR-000070

.TESTED ON
    Date(s) Tested  : 
    Tested By       : 
    Systems Tested  : 
    PowerShell Ver. : 

.USAGE
    Put any usage instructions here.
    Example syntax:
     
#>

# YOUR CODE GOES HERE
# STIG ID: WN10-UR-000070
# Purpose: Configure "Deny access to this computer from the network" for required groups

Write-Output "Checking 'Deny access to this computer from the network' settings..."

# --- 1. Determine if system is domain-joined ---
try {
    $domainJoined = (Get-WmiObject Win32_ComputerSystem).PartOfDomain
} catch {
    $domainJoined = $false
}

# --- 2. Define required accounts based on system type ---
$requiredAllSystems = @("Guests")
$requiredDomainSystems = @("Enterprise Admins", "Domain Admins", "Local account")

if ($domainJoined) {
    $requiredAccounts = $requiredAllSystems + $requiredDomainSystems
    Write-Output "Domain system detected – required accounts: $($requiredAccounts -join ', ')"
} else {
    $requiredAccounts = $requiredAllSystems
    Write-Output "Standalone system detected – required accounts: $($requiredAccounts -join ', ')"
}

# --- 3. Export current security policy ---
$tempCfg = "$env:TEMP\secpol.cfg"
secedit /export /cfg $tempCfg /quiet

# --- 4. Read the "SeDenyNetworkLogonRight" entry ---
$currentPolicy = (Select-String -Path $tempCfg -Pattern "SeDenyNetworkLogonRight").ToString()

if ($null -eq $currentPolicy) {
    Write-Output "No existing 'Deny access to this computer from the network' policy found – will create one."
    $currentPolicy = "SeDenyNetworkLogonRight = "
}

# --- 5. Extract current values (SIDs or names) ---
$currentValues = @()
if ($currentPolicy -match "=") {
    $currentValues = $currentPolicy.Split("=")[1].Trim() -split ","
    $currentValues = $currentValues | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
}

# --- 6. Check compliance ---
$missing = $requiredAccounts | Where-Object { $_ -notin $currentValues }

if ($missing.Count -eq 0) {
    Write-Output "Compliant: All required accounts already defined for 'Deny access to this computer from the network'."
} else {
    Write-Output "Non-Compliant: Missing entries: $($missing -join ', ')"
    Write-Output "Remediating..."
    
    # Combine existing and required entries (avoid duplicates)
    $newValues = ($currentValues + $requiredAccounts) | Sort-Object -Unique

    # Update line in the configuration file
    (Get-Content $tempCfg) | ForEach-Object {
        if ($_ -match "SeDenyNetworkLogonRight") {
            "SeDenyNetworkLogonRight = " + ($newValues -join ",")
        } else {
            $_
        }
    } | Set-Content $tempCfg

    # --- 7. Apply new policy ---
    secedit /configure /db "$env:windir\security\local.sdb" /cfg $tempCfg /areas USER_RIGHTS /quiet
    gpupdate /force | Out-Null

    Write-Output "Remediated: 'Deny access to this computer from the network' now includes: $($newValues -join ', ')"
}

# --- 8. Cleanup ---
Remove-Item $tempCfg -ErrorAction SilentlyContinue
Write-Output "Verification complete for STIG ID: WN10-UR-000070"

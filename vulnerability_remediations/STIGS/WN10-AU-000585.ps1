<#
.SYNOPSIS
    Configuring the system to ignore name release requests, except from WINS servers, prevents a denial of service (DoS) attack. 
    The DoS consists of sending a NetBIOS name release request to the server for each entry in the server's cache, causing a response delay in the normal operation of the servers WINS resolution capability.

.NOTES
    Author          : Arthur Lau
    LinkedIn        : linkedin.com/in/arthur-lau-4a7403172/
    GitHub          : github.com/arthurlau1
    Date Created    : 2025-09-011
    Last Modified   : 2025-09-011
    Date Created    : 2024-09-09
    Last Modified   : 2024-09-09
    Version         : 1.0
    CVEs            : N/A
    Plugin IDs      : N/A
    STIG-ID         : WN10-AU-000585

.TESTED ON
    Date(s) Tested  : 
    Tested By       : 
    Systems Tested  : 
    PowerShell Ver. : 

.USAGE
    Put any usage instructions here.
    Example syntax:
     
#>
# STIG ID: WN10-AU-000585
# Purpose: Ensure "Audit Process Creation" is set to audit Failure events

$subcategory = "Process Creation"
$desiredSetting = "Failure"

Write-Output "Checking compliance for STIG ID: WN10-AU-000585 ..."
Write-Output "Ensuring 'Audit: Force audit policy subcategory settings' (WN10-SO-000030) is enabled..."

# --- 1. Ensure advanced audit policy subcategories are enforced (dependency: WN10-SO-000030) ---
$lsaPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa"
$lsaName = "SCENoApplyLegacyAuditPolicy"
$lsaValue = (Get-ItemProperty -Path $lsaPath -Name $lsaName -ErrorAction SilentlyContinue).$lsaName

if ($lsaValue -ne 1) {
    Write-Output "Non-Compliant: Advanced audit policy enforcement is not enabled. Enabling now..."
    Set-ItemProperty -Path $lsaPath -Name $lsaName -Value 1 -Type DWord
    Write-Output "Remediated: Enabled advanced audit policy enforcement (SCENoApplyLegacyAuditPolicy = 1)."
} else {
    Write-Output "Compliant: Advanced audit policy enforcement already enabled."
}

# --- 2. Check current audit setting for "Process Creation" ---
$currentSetting = (auditpol /get /subcategory:"$subcategory" 2>$null | Select-String "Failure").ToString()

if ($currentSetting -match "Failure") {
    Write-Output "Compliant: '$subcategory' is already auditing Failure events."
}
else {
    Write-Output "Non-Compliant: '$subcategory' is not auditing Failure events. Applying remediation..."
    auditpol /set /subcategory:"$subcategory" /failure:enable | Out-Null
    Write-Output "Remediated: Enabled Failure auditing for '$subcategory'."
}

# --- 3. Verify remediation ---
$verifySetting = (auditpol /get /subcategory:"$subcategory" 2>$null | Select-String "Failure").ToString()
if ($verifySetting -match "Failure") {
    Write-Output "Verification passed: '$subcategory' is auditing Failure events."
} else {
    Write-Output "Verification failed: Please manually verify with 'auditpol /get /subcategory:\"$subcategory\"'."
}

Write-Output "Compliance check complete for STIG ID: WN10-AU-000585."

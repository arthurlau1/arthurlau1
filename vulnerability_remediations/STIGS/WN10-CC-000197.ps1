<#
.SYNOPSIS
    Microsoft consumer experiences provides suggestions and notifications to users, which may include the installation of Windows Store apps. 
    Organizations may control the execution of applications through other means such as whitelisting. 
    Turning off Microsoft consumer experiences will help prevent the unwanted installation of suggested applications.

.NOTES
    Author          : Arthur Lau
    LinkedIn        : linkedin.com/in/arthur-lau-4a7403172/
    GitHub          : github.com/arthurlau1
    Date Created    : 2025-09-011
    Last Modified   : 2025-09-011
    Date Created    : 2024-09-09
    Last Modified   : 2024-09-09
    Version         : 1.0
    CVEs            : N/A
    Plugin IDs      : N/A
    STIG-ID         : WN10-CC-000197

.TESTED ON
    Date(s) Tested  : 
    Tested By       : 
    Systems Tested  : 
    PowerShell Ver. : 

.USAGE
    Put any usage instructions here.
    Example syntax:
     
#>

# YOUR CODE GOES HERE
# STIG ID: WN10-CC-000197
# Purpose: Disable Windows Consumer Features (applies to Windows 10 v1607 and later)

$path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent"
$name = "DisableWindowsConsumerFeatures"
$desiredValue = 1

# --- 1. Check Windows version ---
try {
    $version = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").ReleaseId
} catch {
    $version = "Unknown"
}

if ($version -eq "1507") {
    Write-Output "NA: Windows 10 version 1507 LTSB detected. STIG WN10-CC-000197 not applicable."
    return
}

# --- 2. Ensure registry path exists ---
if (-not (Test-Path $path)) {
    New-Item -Path $path -Force | Out-Null
    Write-Output "Created registry path: $path"
}

# --- 3. Retrieve current value ---
$currentValue = (Get-ItemProperty -Path $path -Name $name -ErrorAction SilentlyContinue).$name

# --- 4. Check compliance ---
if ($currentValue -eq $desiredValue) {
    Write-Output "Compliant: $name is already set to $desiredValue (Windows Consumer Features disabled)"
}
else {
    # --- 5. Remediate ---
    Set-ItemProperty -Path $path -Name $name -Value $desiredValue -Type DWord
    if ($null -eq $currentValue) {
        Write-Output "Remediated: $name did not exist, created with value $desiredValue"
    }
    else {
        Write-Output "Remediated: $name was $currentValue, changed to $desiredValue"
    }
}

Write-Output "Verification complete for STIG ID: WN10-CC-000197"
